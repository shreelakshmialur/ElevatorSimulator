/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 20:20:04 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import main.ElevatorCalls;
import model.Elevators;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class ElevatorCalls_ESTest extends ElevatorCalls_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElevatorCalls elevatorCalls0 = new ElevatorCalls();
      // Undeclared exception!
      try { 
        elevatorCalls0.type((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ElevatorCalls.setInternal((-1079417536), (-1), false);
      
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorCalls", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ElevatorCalls.setInternal((-702), (-702), true);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElevatorCalls.setExternal(0, false);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElevatorCalls.setExternal(0, true);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ElevatorCalls elevatorCalls0 = new ElevatorCalls();
      int int0 = elevatorCalls0.type("i");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ElevatorCalls elevatorCalls0 = new ElevatorCalls();
      int int0 = elevatorCalls0.type(" <.SgbF[Sz$c| 1Dw[");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ElevatorCalls elevatorCalls0 = new ElevatorCalls();
      Elevators elevators0 = elevatorCalls0.getNearestElevator(1, 1);
      assertNull(elevators0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ElevatorCalls elevatorCalls0 = new ElevatorCalls();
      elevatorCalls0.run();
      assertEquals((-1), ElevatorCalls.goToFloorEnteredByGui);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElevatorCalls.listen();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElevatorCalls elevatorCalls0 = new ElevatorCalls();
      // Undeclared exception!
      try { 
        elevatorCalls0.randomElevator();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }
}
