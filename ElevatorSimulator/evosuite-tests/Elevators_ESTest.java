/*
 * This file was automatically generated by EvoSuite
 * Thu Jan 25 22:35:59 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Component;
import java.util.ArrayList;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import javax.swing.JButton;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

import main.ElevatorCalls;
import model.Elevators;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true) 
public class Elevators_ESTest extends Elevators_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Elevators elevators0 = new Elevators(1000);
      elevators0.addQueue(1000);
      ElevatorCalls.goToFloorEnteredByGui = 0;
      Elevators.motion_direction = 1;
      ElevatorCalls.setInternal(1, 1, false);
      Elevators.door = 1;
      elevators0.addQueue(1821);
      elevators0.close();
      elevators0.close();
      ElevatorCalls.setExternal(1, true);
      elevators0.addQueue(1000);
      ElevatorCalls.setExternal(1000, true);
      elevators0.getCurrentFloor();
      elevators0.serveFloor2();
      elevators0.serveFloor2();
      elevators0.open();
      elevators0.serveFloor2();
      elevators0.addQueue(1000);
    //  elevators0.check();
      Elevators.motion_direction = 0;
      elevators0.close();
      elevators0.setDoorSize(1);
      elevators0.setDoorSize(1);
      elevators0.getCurrentFloor();
      ElevatorCalls elevatorCalls0 = new ElevatorCalls();
      // Undeclared exception!
      try { 
        elevatorCalls0.randomElevator();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Elevators elevators0 = new Elevators(5);
      ArrayList<JButton> arrayList0 = new ArrayList<JButton>();
      arrayList0.spliterator();
      Elevators.door = (-1);
      ElevatorCalls.active_buttons = arrayList0;
      elevators0.open();
      ElevatorCalls.setExternal(0, false);
      ElevatorCalls.goToFloorEnteredByGui = (-1);
      // Undeclared exception!
      try { 
      //  elevators0.check();
       
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Elevators elevators0 = new Elevators(0);
      elevators0.getQueue();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Elevators elevators0 = new Elevators((-1521));
      ArrayList<JButton> arrayList0 = ElevatorCalls.active_buttons1;
      PriorityQueue<Component.BaselineResizeBehavior> priorityQueue0 = new PriorityQueue<Component.BaselineResizeBehavior>();
      arrayList0.retainAll(priorityQueue0);
      arrayList0.clear();
      ElevatorCalls.active_buttons = arrayList0;
      elevators0.setCurrentFloor((-1521));
      elevators0.addQueue(1097);
      elevators0.addQueue(1097);
      elevators0.serveFloor2();
     // elevators0.check();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Elevators elevators0 = new Elevators((-1868));
      elevators0.setCurrentFloor((-1868));
      elevators0.close();
      elevators0.getDoorSize();
      elevators0.setDoorSize((-1));
      elevators0.setDoorSize(0);
      elevators0.serveFloor2();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Elevators elevators0 = new Elevators(1000);
      elevators0.getDoorSize();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Elevators elevators0 = new Elevators(0);
      elevators0.serveFloor2();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Elevators elevators0 = new Elevators(1600);
      elevators0.setDoorSize(1600);
      elevators0.getCurrentFloor();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ElevatorCalls elevatorCalls0 = new ElevatorCalls();
      ElevatorCalls.setInternal((-767), (-1), true);
      int int0 = 4;
      ElevatorCalls.dummy = elevatorCalls0.dummy;
      elevatorCalls0.getNearestElevator(0, 4);
      ElevatorCalls.active_buttons = elevatorCalls0.active_buttons;
      // Undeclared exception!
      try { 
        elevatorCalls0.randomElevator();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElevatorCalls elevatorCalls0 = new ElevatorCalls();
      // Undeclared exception!
      try { 
        elevatorCalls0.randomElevator();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Elevators elevators0 = new Elevators(1);
      elevators0.addQueue(180);
      elevators0.setDoorSize((-2187));
      elevators0.getId();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Elevators elevators0 = new Elevators(0);
      elevators0.setCurrentFloor((-659.391163));
      elevators0.setDoorSize(0);
      elevators0.addQueue(1296);
      elevators0.addQueue(1296);
      elevators0.setCurrentFloor(1296);
     // elevators0.check();
      elevators0.open();
      assertEquals(1296.0, elevators0.getCurrentFloor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Elevators elevators0 = new Elevators(2000);
      assertEquals(0, Elevators.motion_direction);
      assertEquals(0, elevators0.getDoorSize());
      assertEquals(0.0, elevators0.getCurrentFloor(), 0.01);
      assertEquals(2000, elevators0.getId());
  }
}
